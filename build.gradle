plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven { url = "https://maven.quiltmc.org/repository/release" }
    maven { url = "https://hephaestus.dev/release" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://storage.googleapis.com/devan-maven/" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://aperlambda.github.io/maven" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.kotlindiscord.com/repository/terraformers/" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.cafeteria.dev/releases/" }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://maven.gegy.dev" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://maven.gudenau.net" }
    maven { url = "https://maven.blamejared.com/vazkii/botania/Botania/" }
    maven { url = "https://maven.kyrptonaught.dev/" }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation 'io.github.douira:glsl-transformer:2.0.0-pre14'

    modCompileOnly "com.github.Treetrain1:Flywheel:1f43c56a94096f09048f41a79c9bc43bbbe1deda"
    compileOnly "org.joml:joml:1.10.4"
    compileOnly 'org.anarres:jcpp:1.4.14'

    modCompileOnly "maven.modrinth:iris:${iris_version}"
    modCompileOnly "maven.modrinth:sodium:${sodium_version}"

    localRuntime "org.joml:joml:1.10.4"
    localRuntime 'org.anarres:jcpp:1.4.14'
    //modLocalRuntime "maven.modrinth:indium:1.0.7+mc1.18.2"
    modLocalRuntime "maven.modrinth:iris:${iris_version}"
    modLocalRuntime "maven.modrinth:sodium:${sodium_version}"
    modLocalRuntime "com.github.Treetrain1:Flywheel:1f43c56a94096f09048f41a79c9bc43bbbe1deda"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

loom {
    accessWidenerPath = file("src/main/resources/irisflw.accesswidener")
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = "${project.archives_base_name}-${minecraft_version}"
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
